#!/bin/bash

# script that generates a front-end for iwctl

# Display help
display_help() {
  cat << EOF

Usage: dmenu_network [options] <SSID>

Description:
  A front-end for iwctl using dmenu.

Commands:
  --help                   Display this help page.
  --connect <SSID>         Connect to a specified or chosen Wi-Fi network.
  --disconnect             Disconnect from the current Wi-Fi network.
  --forget <SSID>          Forget a specified network.
  --reset                  Bring Wi-Fi interface down, then up again (requires sudo permissions).

EOF
  exit 0
}

# Check for valid parameters
if [[ ! -z $1 ]];
then
  case $1 in 
    --help | --connect | --disconnect | --forget | --reset )
    ;;
      *)
        echo "Invalid command $1"
        echo "Use 'dmenu_network --help' for more info."
        exit 1
    ;;
  esac
fi

# Check help parameter and display help
[[ $1 == "--help" ]] && display_help	

# Check if iwd is installed first
if ! command -v iwctl &> /dev/null
then
  notify-send "Network" "󰀦 Could not find command 'iwctl'"
  exit 1
fi

# Check if iwd service is running
if [[ "inactive" == $(systemctl is-active iwd.service) ]]
then
  notify-send "Network" "󰲝 Attempting to start 'iwd.service'..."
  $(sudo -A systemctl start iwd.service) || exit 1
fi

# Forget selected wifi network
# >$ wifi forget [SSID]
if [[ $1 == forget ]];
then
	if [[ -z $2 ]];
	then
		# Select from list of known networks
		WIFI_KNOWN_LIST=$(
			iwctl known-networks list | 
			awk '{if(NR>4)print}' | 
			grep '[a-zA-Z0-9]' |
			sed 's/ *\(psk\|open\|8021x\)    .*//g' | 
			sed 's/^ *//g' | 
			sed 's/ *$//g'
		)
		if [[ -z $WIFI_KNOWN_LIST ]];
		then
			notify-send "Network" "󰛵 No known networks"
			exit 1
		fi
		WIFI_NETWORK=$( echo "$WIFI_KNOWN_LIST" | dmenu -p "Select Wifi 󰛳:" -l 30 )
		# Exit if user presses 'ESC' in dmenu
		if [[ -z $WIFI_NETWORK ]];
		then
			exit 0
		fi
	else
		WIFI_NETWORK=$2
	fi
	iwctl known-networks "$WIFI_NETWORK" forget &&
	notify-send "Network" "󰍸 Forgot $WIFI_NETWORK"
	exit 0
fi

# Select wifi interface device
if ip link | egrep -q '^[0-9]+: w.* state UP '
then
	# Priortize devices that are up already
	WIFI_DEVICE_LIST=$(
		ip link |
		egrep -i '^[0-9]+: w.* state UP ' | 
		sed 's/^[0-9]\+: //g' | 
		sed 's/:.*//g'
	)
else
	WIFI_DEVICE_DOWN=1
	WIFI_DEVICE_LIST=$(
		ip link |
		egrep -i '^[0-9]+: w' | 
		sed 's/^[0-9]\+: //g' | 
		sed 's/:.*//g'
	)
fi

if [ -z "$WIFI_DEVICE_LIST" ]
then
	notify-send "Network" "󰛵 No available wifi devices. Use 'ip link' to check status"
	exit 1
elif echo $WIFI_DEVICE_LIST | grep -q " "
then
	# Pipe list of devices to dmenu if there is more than one
	WIFI_DEVICE=$(
		echo "$WIFI_DEVICE_LIST" | dmenu -p "Select Wifi 󰛳:" -l 30
	)
	# Exit if user presses 'ESC' in dmenu
	if [[ -z $WIFI_DEVICE ]];
	then
		exit 0
	fi
else
	# Skip dmenu if there is only one device
	WIFI_DEVICE="$WIFI_DEVICE_LIST"
fi

# Manually disconnect from wifi
if [[ $1 == disconnect ]];
then
	iwctl station "$WIFI_DEVICE" disconnect &&
	notify-send "Network" "󰲜 Disconnected from wifi"
	exit 0
fi

# Bring down wifi interface, then bring it back up
# Requires sudo
if [[ $1 == reset ]];
then
	sudo -A ip link set "$WIFI_DEVICE" down &&
	sudo -A ip link set "$WIFI_DEVICE" up &&
	notify-send "Network" "󰱓 $WIFI_DEVICE has been reset"
	exit 0
fi

# Try to bring up wifi interface if it is down
# Requires sudo
if [[ $WIFI_DEVICE_DOWN ]];
then
	notify-send "Network" "󰅛 Device $WIFI_DEVICE is down. Attempting to bring it up..."
	sudo -A ip link set "$WIFI_DEVICE" up &&
	notify-send "Network" "Success" ||
	notify-send "Network" "󰲜 Could not bring device up"
fi

# Select wifi network to connect to
iwctl station "$WIFI_DEVICE" scan
sleep .5

# Set SSID manually if given through command line
# >$ wifi connect 'SSID'
if [[ $1 == connect && ! -z $2 ]];
then
	WIFI_NETWORK=$2
fi

if [[ -z $2 ]];
then
	# Remove colors
	WIFI_NETWORK_LIST=$(
		iwctl station "$WIFI_DEVICE" get-networks | 
		awk '{if(NR>4)print}' | 
		sed 's/\x1b\[[0-9;]*m\*\?//g'
	)
	if [[ -z $WIFI_NETWORK_LIST ]];
	then
		notify-send "Network" "󰲜 No wifi networks found"
		exit 1
	fi
	# Trim selected network for SSID
	WIFI_NETWORK=$(
		echo "$WIFI_NETWORK_LIST" |
		dmenu -p "Select Wi-Fi network:" -l 30 | 
		sed 's/ *\(psk\|open\|8021x\) \+\*\+//g' | 
		sed 's/^ *>\? *//g' | 
		sed 's/ *$//g'
	)
	# Exit if user presses 'ESC' in dmenu
	if [[ -z $WIFI_NETWORK ]];
	then
		exit 0
	fi
fi

# Connect to wifi
# This command will prompt for password first if required
WIFI_PASSWORD=$(echo "" | dmenu -P -p "Enter password 󰟵 :")
iwctl --passphrase="$WIFI_PASSWORD" station "$WIFI_DEVICE" connect "$WIFI_NETWORK" &&
notify-send "Network" "󰱓 Connected to $WIFI_NETWORK"  ||
notify-send "Network" "󰲜 Could not connect to $WIFI_NETWORK"
