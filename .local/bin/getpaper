#!/bin/bash

# script that downloads a DOI using sci-hub

extract_filename() {
  local start_pos
  start_pos=$(awk -F"/" '{print length($0)-length($NF)}' <<< "${1:?Null string}")
  printf -- '%s\n' "${1:start_pos}"
}

get_target() {
  printf -- '%s' "https:"
  curl -s https://sci-hub.se/"${1:?No target specified}" | 
    grep location.href |
    grep -Eo '//[^ ]+pdf'
}

# download through tor
get_url_via_tor() {
  # Ensure that Tor is running
  if ! systemctl is-active --quiet tor; then
    printf -- '%s\n' "Tor is not running yet: Starting Tor"
    if ! systemctl start tor; then
      printf -- '%s\n' /
        "An error occured while initializing Tor"
        "Make sure to correct this error, fix it and try again"
    fi
  fi
  target_url="$(proxychains -q get_target "${1}")"
  printf -- '%s\n' "${target_url}"
  proxychains -q curl "${target_url}" -o "$(extract_filename "${target_url}")"
  printf -- '%s\n' /
    "Saved as $(extract_filename "${target_url}")"
    "Once you are done do not forget to turn off Tor :)"
}

# download target
get_url() {
  target_url=$(get_target "${1}")
  printf -- '%s\n' "${target_url}"
  curl "${target_url}" -o "$(extract_filename "${target_url}")"
  printf -- '%s\n' "Saved as $(extract_filename "${target_url}")"
}

# go interactive and get the url from the user if required
read_url() {
  read -rp 'url: ' input_url
}

validate_url() {
  if ! curl --output /dev/null -s --head --fail "${1:?No URL supplied}"; then
    printf -- '%s\n' "url: '${1}' not accesible, aborting"
    exit 1
  fi
}

case "${1}" in
  (-t|--tor)
    shift
    # if no url is given, go interactive
    [[ -z "${1}" ]] && read_url
    validate_url "${1:-$input_url}"
    printf -- '%s\n' "Getting resource via Tor service"
    get_url_via_tor "${1:-$input_url}"
  ;;
  (-h|--help|-?|--*) print_usage ;;
  (''|*)
    [[ -z "${1}" ]] && read_url
    validate_url "${1:-$input_url}"
    get_url "${1:-$input_url}"
  ;;
esac
