# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'
set autoquit true
set cursorpreviewfmt ""

# cmds/functions
cmd open ${{
  case $(file --mime-type "$(readlink -f $f)" -b) in
    text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $fx;;
    image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
      setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
        [ -z "$file" ] && continue
        lf -remote "send select \"$file\""
        lf -remote "send toggle"
      done &
      ;;
    *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
  esac
}}

cmd mkdir $mkdir -p "$@"

cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract?[y/N]"
	read ans
  [ $ans = "y" ] && {
    case $fx in
      *.tar.bz2) tar xjf $fx ;;
			*.tar.gz) tar xzf $fx ;;
			*.bz2) bunzip2 $fx ;;
			*.rar) unrar e $fx ;;
			*.gz) gunzip $fx ;;
			*.tar) tar xf $fx ;;
			*.tbz2) tar xjf $fx ;;
			*.tgz) tar xzf $fx ;;
			*.zip) unzip $fx ;;
			*.Z) uncompress $fx ;;
			*.7z) 7z x $fx ;;
			*.tar.xz) tar xf $fx ;;
		esac
  }
}}

cmd zip ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "zip?[y/N]"
	read ans
  [ $ans = "y" ] && zip -r "$f.zip" "$(basename "$f")"
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "󰪹 File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send " File(s) copied." "File(s) copies to $dest."
}}

cmd yank ${{
echo -n $fx | xclip -selection clipboard
}}

cmd setbg "$1"

cmd bulkrename ${{
  tmpfile_old="$(mktemp)"
  tmpfile_new="$(mktemp)"
  tmpfile_ext="$(mktemp)"

  [ -n "$fs" ] && fs=$(basename -a $fs | sort -fV) || fs=$(find . -maxdepth 1 -type f | cut -c 3- | sort -fV)

  for f in $fs; do
      echo "${f%.*}" >> "$tmpfile_old"
      echo "${f##*.}" >> "$tmpfile_ext"
  done

  cp "$tmpfile_old" "$tmpfile_new"
  $EDITOR "$tmpfile_new"

  [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new" "$tmpfile_ext"; exit 1; }

  exec 3<"$tmpfile_old"
  exec 4<"$tmpfile_ext"
  exec 5<"$tmpfile_new"

  while IFS= read -r old_name <&3 && IFS= read -r ext <&4 && IFS= read -r new_name <&5; do
      [ "$old_name" = "$new_name" ] || [ -e "$new_name.$ext" ] || mv -- "$old_name.$ext" "$new_name.$ext"
  done

  rm -f "$tmpfile_old" "$tmpfile_new" "$tmpfile_ext"
  lf -remote "send $id unselect"
}}

# Bindings
map <c-f> $lf -remote "send $id select \"$(fzf)\""
map gh
map g top
map D delete
map Z zip
map E extract
map C copyto
map Y yank
map M moveto
map <c-n> push :mkdir<space>""<left>
map <c-r> reload
map <c-s> set hidden!
map <enter> shell
map o &mimeopen $f
map O $mimeopen --ask $f

map R push A<c-u> # new rename
map r :rename # before extension
map B bulkrename
map b $setbg $f

map V push :!nvim<space>

map W $setsid -f $TERMINAL >/dev/null 2>&1
